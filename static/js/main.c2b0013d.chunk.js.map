{"version":3,"sources":["components/TodoForm.js","constants/stringValuesConst.js","components/Todo.js","helpers/checkTodo.js","servises/data-servise.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","name","className","placeholder","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","id","setEdit","map","todo","isComplete","key","checkTodo","test","BASE_API","DataService","fetch","response","json","task","method","headers","body","JSON","stringify","TodoList","setTodos","getTasks","then","result","error","console","addInState","updateInState","prev","item","removeInState","removedArr","filter","addTask","updatedTodo","updateTask","res","status","updatedTodos","i","deleteTask","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2b0013d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  ADD_BUTTON_NAME,\r\n  ADD_INPUT_PLACEHOLDER,\r\n  EDIT_BUTTON_NAME,\r\n  EDIT_INPUT_PLACEHOLDER\r\n} from \"../constants/stringValuesConst\";\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = e => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n      name: input\r\n    });\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className='todo-form'>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder={EDIT_INPUT_PLACEHOLDER}\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo-input edit'\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button edit'>\r\n            {EDIT_BUTTON_NAME}\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder={ADD_INPUT_PLACEHOLDER}\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo-input'\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button'>\r\n            {ADD_BUTTON_NAME}\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","export const TODO_HEADER_STRING = \"Какие планы сегодня?\";\r\nexport const EDIT_INPUT_PLACEHOLDER = \"Измените вашу задачу\";\r\nexport const ADD_INPUT_PLACEHOLDER = \"Добавить новую задачу\";\r\nexport const ADD_BUTTON_NAME = \"Добавить\";\r\nexport const EDIT_BUTTON_NAME = \"Изменить\";","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo({id: edit.id, ...value});\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={todo.id}\r\n    >\r\n      <div onClick={() => completeTodo(todo)}>\r\n        {todo.name}\r\n      </div>\r\n      <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.name })}\r\n          className='edit-icon'\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;\r\n","export function checkTodo(todo) {\r\n    return !todo.name || /^\\s*$/.test(todo.name)\r\n}","const BASE_API = \"https://todolist-vlasova.herokuapp.com/\";\r\n\r\nexport class DataService {\r\n    static async getTasks() {\r\n        let response = await fetch(`${BASE_API}tasks`);\r\n        return response.json();\r\n    }\r\n\r\n\r\n\r\n    static async addTask(task) {\r\n        return fetch(`${BASE_API}tasks`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(task)\r\n        });\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        return fetch(`${BASE_API}tasks/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n    }\r\n\r\n    static async updateTask(task) {\r\n        return fetch(`${BASE_API}tasks/${task.id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(task)\r\n        });\r\n    }\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\nimport {checkTodo} from \"../helpers/checkTodo\";\r\nimport {TODO_HEADER_STRING} from \"../constants/stringValuesConst\";\r\nimport {DataService} from \"../servises/data-servise\";\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    DataService.getTasks()\r\n        .then(\r\n            (result) => {\r\n              setTodos(result);\r\n            },\r\n            (error) => {\r\n              console.error(error);\r\n            }\r\n        )\r\n  }, [])\r\n\r\n  const addTodo = todo => {\r\n    if (checkTodo(todo)) {\r\n      return;\r\n    }\r\n\r\n    DataService.addTask(todo).then(\r\n        (result) => {\r\n          result.json().then((todo) => {\r\n            addInState(todo);\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n    );\r\n  };\r\n\r\n  const updateTodo = (updatedTodo) => {\r\n    if (checkTodo(updatedTodo)) {\r\n      return;\r\n    }\r\n    DataService.updateTask(updatedTodo).then((res) => {\r\n      if (res.status === 200) {\r\n        updateInState(updatedTodo);\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeTodo = id => {\r\n    DataService.deleteTask(id).then(res => {\r\n      if (res.status === 200) {\r\n        removeInState(id);\r\n      }\r\n    })\r\n  };\r\n\r\n  const completeTodo = todo => {\r\n    const updatedTodo = {...todo};\r\n    updatedTodo.isComplete = !todo.isComplete;\r\n    DataService.updateTask(todo).then((res) => {\r\n      if (res.status === 200) {\r\n        let updatedTodos = todos.map(i => {\r\n          if (i.id === todo.id) {\r\n            i.isComplete = updatedTodo.isComplete;\r\n          }\r\n          return i;\r\n        });\r\n        setTodos(updatedTodos);\r\n      }\r\n    });\r\n  };\r\n\r\n  const addInState = (todo) => {\r\n    setTodos([...todos, todo]);\r\n  }\r\n\r\n  const updateInState = (todo) => {\r\n    setTodos(prev => prev.map(item => (item.id === todo.id ? todo : item)));\r\n  }\r\n\r\n  const removeInState = (id) => {\r\n    const removedArr = [...todos].filter(todo => todo.id !== id);\r\n    setTodos(removedArr);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>{TODO_HEADER_STRING}</h1>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='todo-app'>\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}